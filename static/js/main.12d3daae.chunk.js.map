{"version":3,"sources":["components/Screens/Loading.jsx","redux/features/settingsReducer.js","components/Screens/Weather/WeatherCards/WeatherCard.jsx","api/yrNoApi.js","redux/features/weatherReducer.js","components/Screens/Weather/WeatherCards/ListOfWeatherCards.jsx","components/Screens/Weather/Controls/Arrows.jsx","components/Screens/Weather/Controls/Degrees.jsx","components/Screens/Weather/Chart.jsx","components/Errors/NotFound.jsx","components/Screens/Weather/Weather.jsx","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["styles","makeStyles","root","width","height","display","justifyContent","alignItems","alignSelf","className","CircularProgress","constants","slice","createSlice","name","initialState","degree","currentPage","pageSize","activeDateForCharts","reducers","changeDegree","state","action","payload","nextPage","itemAmount","pageAmount","Math","ceil","nextPageNumber","prevoiusPage","previousPage","setActiveDateForCharts","payloadDate","Date","getTime","stateDate","actions","selectCurrentDegree","settings","selectCurrentPage","selectPageSize","selectActiveDateForCharts","WeatherCard","props","data","date","boxSizing","padding","cursor","fontSize","dispatch","useDispatch","Paper","onClick","data-testid","temperature","pressure","weatherType","toLocaleDateString","getWeather","a","coords","latitude","longitude","getCurrentPostion","console","warn","fetch","response","ok","json","Error","status","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","setWeather","setCards","cards","weatherData","startFrom","referenceDate","i","today","setDate","getDate","push","summarize","getCards","changeTemperatureType","map","card","currentDegrees","degrees","fahrenheitToCelciusAndViceVers","temperatureConverter","selectWeatherData","weather","selectCards","round","summarizedDay","properties","timeseries","filter","item","itemDate","time","equalDates","getFullYear","getMonth","dayTime","getHours","reduce","acc","curr","idx","src","instant","details","air_temperature","air_pressure_at_sea_level","floor","length","Proxy","get","target","prop","summary","counter","ListOfWeatherCards","useState","slicedCards","setSlicedCards","useEffect","page","marginBottom","Container","maxWidth","Grid","container","justify","spacing","value","key","sm","xs","Arrows","cardsAmount","rightButton","textAlign","previousPageDisabled","setPreviousPageDisabled","nextPageDisabled","setNextPageDisabled","direction","Button","disabled","variant","color","Degrees","group","FormControl","component","RadioGroup","row","aria-label","defaultValue","FormControlLabel","control","Radio","checked","label","labelPlacement","Chart","position","fill","fab","right","top","chart","setTimeseries","ref","useRef","activeDate","windSpeed","wind_speed","windDirection","wind_from_direction","humanity","relative_humidity","clouds","cloud_area_fraction","hour","current","innerHTML","MARGIN","bottom","left","WIDTH","getBoundingClientRect","g","d3","append","attr","x","domain","range","y","d","nice","selectAll","join","_","bandwidth","call","tickFormat","tickSizeOuter","select","remove","text","charAt","toUpperCase","t","Fab","size","NotFoundError","code","message","useSelector","App","loaded","setLoaded","error","Boolean","Weather","Loading","window","location","hostname","match","configureStore","reducer","weatherReducer","settingsReducer","ReactDOM","render","StrictMode","store","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"4QAKe,aACX,IAAMA,EAASC,YAAW,CACtBC,KAAM,CACFC,MAAO,OACPC,OAAQ,QACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZ,UAAW,CACPC,UAAW,YARRP,GAaf,OAAO,yBAAKQ,UAAWT,EAAOE,MAC1B,6BACI,kBAACQ,EAAA,EAAD,S,0CCnBCC,EACA,UADAA,EAEG,aAGHC,EAAQC,YAAY,CAC7BC,KAAM,WACNC,aAAc,CACVC,OAAQL,EACRM,YAAa,EACbC,SAAU,EACVC,oBAAqB,MAEzBC,SAAU,CACNC,aADM,SACOC,EAAOC,GAChBD,EAAMN,OAASO,EAAOC,SAE1BC,SAJM,SAIGH,EAAOC,GACZ,IAAMG,EAAaH,EAAOC,QACpBG,EAAaC,KAAKC,KAAKH,EAAaJ,EAAMJ,UAC1CY,EAAiBR,EAAML,YAAc,EAE3CK,EAAML,YAAca,EAAiBH,EAAaL,EAAML,YAAca,GAE1EC,aAXM,SAWOT,GACT,IAAMU,EAAeV,EAAML,YAAc,EAEzCK,EAAML,YAAce,EAAe,EAAIA,EAAeV,EAAML,aAEhEgB,uBAhBM,SAgBiBX,EAAOC,GAC1B,GAAsB,MAAlBA,EAAOC,QACPF,EAAMH,oBAAsB,SACzB,CACH,IAAMe,EAAc,IAAIC,KAAKZ,EAAOC,SAASY,UACvCC,EAAY,IAAIF,KAAKb,EAAMH,qBAAqBiB,UAEtDd,EAAMH,oBAAsBe,IAAgBG,EAAY,KAAOH,O,EAMCtB,EAAM0B,QAAvEjB,E,EAAAA,aAAcI,E,EAAAA,SAAUM,E,EAAAA,aAAcE,E,EAAAA,uBAExCM,EAAsB,SAAAjB,GAAK,OAAIA,EAAMkB,SAASxB,QAC9CyB,EAAoB,SAAAnB,GAAK,OAAIA,EAAMkB,SAASvB,aAC5CyB,EAAiB,SAAApB,GAAK,OAAIA,EAAMkB,SAAStB,UACzCyB,EAA4B,SAAArB,GAAK,OAAIA,EAAMkB,SAASrB,qBAElDP,IAAf,QCpCe,SAASgC,EAAYC,GAAQ,IAChCC,EAASD,EAATC,KACFC,EAAO,IAAIZ,KAAKW,EAAKC,MACrB/C,EAASC,YAAW,CACtBC,KAAM,CACFE,OAAQ,OACR4C,UAAW,aACXC,QAAS,GACTC,OAAQ,UACRC,SAAU,SANHlD,GASTmD,EAAWC,cAEjB,OAAO,kBAACC,EAAA,EAAD,CAAO7C,UAAWT,EAAOE,KAAMqD,QAAS,kBAAMH,EAASnB,EAAuBc,EAAKX,aAAaoB,cAAY,wBAC/G,2BAAG,gDAAH,IAAkCV,EAAKW,YAAvC,QACA,2BAAG,6CAAH,IAA+BX,EAAKY,UACpC,2BAAG,4CAAH,IAA8BZ,EAAKa,aACnC,2BAAG,yCAAH,IAA2BZ,EAAKa,uB,qCCjCjC,SAAeC,IAAtB,+B,4CAAO,sCAAAC,EAAA,6DACCC,EAAS,CAAEC,SAAU,GAAIC,UAAW,IADrC,kBAImDC,IAJnD,oBAISH,OAAUC,EAJnB,EAImBA,SAAUC,EAJ7B,EAI6BA,UAC5BF,EAAS,CAAEC,WAAUC,aALtB,kDAOCE,QAAQC,KAAK,4DAAb,MACAL,EAAS,CAAEE,UAAW,UAAWD,SAAU,WAR5C,yBAWoBK,MAAM,kEAAD,OAAmEN,EAAOC,SAA1E,gBAA0FD,EAAOE,YAX1H,aAWGK,EAXH,QAaUC,GAbV,0CAcQD,EAASE,QAdjB,cAgBOC,MAAM,sBAAD,OAAuBH,EAASI,SAhB5C,2D,sBAoBP,SAASR,IACL,OAAO,IAAIS,SAAQ,SAACC,EAASC,GACzBC,UAAUC,YAAYC,mBAAmBJ,EAASC,MClBnD,IAAMjE,EAAQC,YAAY,CAC7BC,KAAM,UACNC,aAAc,GACdK,SAAU,CACN6D,WADM,SACK3D,EAAOC,GACdD,EAAMwB,KAAN,2BAAkBxB,GAAUC,EAAOC,UAEvC0D,SAJM,SAIG5D,EAAOC,GACZD,EAAM6D,MA4ClB,SAAkBC,GAId,IAJ2C,IAAhBC,EAAe,uDAAH,EACjCF,EAAQ,GACRG,EAAgB,IAAInD,KAEjBoD,EAAIF,EAAWG,EAAQ,IAAIrD,KAAKmD,EAAcG,QAAQH,EAAcI,UAAYL,IAAaE,EAAI,EAAGA,IACrGA,EAAI,GACJC,EAAMC,QAAQD,EAAME,UAAY,GAGpCP,EAAMQ,KAAKC,EAAUJ,EAAOJ,IAGhC,OAAOD,EAxDeU,CAASvE,EAAMwB,KAAMvB,EAAOC,UAE9CsE,sBAPM,SAOgBxE,EAAOC,GACzBD,EAAM6D,MAAQ7D,EAAM6D,MAAMY,KAAI,SAAAC,GAG1B,OAFAA,EAAKvC,YA4GrB,SAA8BuC,EAAMC,GAChC,GAAID,EAAKE,UAAYD,IAAmBA,EACpC,OAAOD,EAAKvC,YAGhB,OAAO0C,EAA+BH,EAAKvC,YAAawC,GAjHzBG,CAAqBJ,EAAMzE,EAAOC,SACrDwE,EAAKE,QAAU3E,EAAOC,QACfwE,S,EAMwCpF,EAAM0B,QAAtD2C,E,EAAAA,WAAYC,E,EAAAA,SAAUY,E,EAAAA,sBAaxBO,EAAoB,SAAA/E,GAAK,OAAIA,EAAMgF,QAAQxD,MAC3CyD,EAAc,SAAAjF,GAAK,OAAIA,EAAMgF,QAAQnB,OAEnCvE,IAAf,QAEO,SAASuF,EAA+B1C,EAAawC,GACxD,OAAIA,IAAmBtF,EACZiB,KAAK4E,MAAqB,EAAd/C,EAAkB,EAAK,IAEnC7B,KAAK4E,MAA2B,GAApB/C,EAAc,IAAU,GA+BnD,SAASmC,EAAUN,EAAeF,GAC9B,IA2DqB1B,EA3Df+C,EAAgBrB,EAAYsB,WAAWC,WAAWC,QAAO,SAAAC,GAC3D,IAAMC,EAAW,IAAI3E,KAAK0E,EAAKE,MACzBC,EAAaF,EAASG,gBAAkB3B,EAAc2B,eACxDH,EAASI,aAAe5B,EAAc4B,YACtCJ,EAASpB,YAAcJ,EAAcI,UACzC,IAAI,IAAIvD,MAAOuD,YAAcoB,EAASpB,UAElC,OAAOsB,EAGP,IAAMG,EAAUL,EAASM,WAAa,IAAMN,EAASM,WAAa,GAClE,OAAOJ,GAAcG,KAE1BE,QAAO,SAACC,EAAKC,EAAMC,EAAKC,GAAS,IAAD,EAC4DF,EAAnFzE,KAAQ4E,QAAWC,QAAWC,EADP,EACOA,gBAAiBC,EADxB,EACwBA,0BAEvD,GAAY,IAARL,EAAW,CACX,IACQ1E,EADO2E,EAAI7F,KAAKkG,MAAML,EAAIM,OAAS,IACnCjF,KACRwE,EAAI3D,YAoDhB,SAAiBb,GAKb,OAAO,IAAIkF,MAAMlF,EAAM,CACnBmF,IAAK,SAACC,EAAQC,GACV,MALa,iBAKTA,GAAyBD,EAAOC,GACzBD,EAAOC,GAAMC,QAAb,YANE,iBAOFD,GAA0BD,EAAOC,QAArC,EACCD,EAAM,cACCA,EAAM,cAAgBE,QAAtB,YACAF,EAAM,aACNA,EAAM,aAAeE,QAArB,YAEA,WAnEGA,CAAQtF,GAAR,aAClBwE,EAAIvE,KAAOwE,EAAKR,KAQpB,OALAO,EAAI7D,YAAcmE,EAAkBN,EAAI7D,YACxC6D,EAAI5D,SAAWmE,EAA4BP,EAAI5D,SAC/C4D,EAAIe,QAAUf,EAAIe,QAAU,EAC5Bf,EAAIvE,KAAOuE,EAAIvE,KAAOuE,EAAIvE,KAAOuC,EAE1BgC,IACR,CAAE7D,YAAa,EAAGC,SAAU,EAAG2E,QAAS,EAAGtF,KAAM,KAAMY,YAAa,OAEvE,MAAO,CACHF,YAAa7B,KAAK4E,MAAMC,EAAchD,YAAcgD,EAAc4B,SAClE3E,UA0BiBA,EA1BS9B,KAAK4E,MAAMC,EAAc/C,SAAW+C,EAAc4B,SA2BzEzG,KAAK4E,MAAiB,IAAX9C,IA1BdC,YAAa8C,EAAc9C,YAC3BZ,KAAM0D,EAAc1D,KACpBmD,QAASvF,GCpGF,SAAS2H,EAAmBzF,GAAQ,IACvCsC,EAA0CtC,EAA1CsC,MAAOe,EAAmCrD,EAAnCqD,QAASjF,EAA0B4B,EAA1B5B,YAAaC,EAAa2B,EAAb3B,SAC/BkC,EAAWC,cAF6B,EAGRkF,mBAAS,IAHD,mBAGvCC,EAHuC,KAG1BC,EAH0B,KAK9CC,qBAAU,WACNtF,EAAS8B,OACV,CAAC9B,IAEJsF,qBAAU,WACNtF,EAAS0C,EAAsBI,MAChC,CAACA,EAAS9C,IAEbsF,qBAAU,WACN,GAAIvD,EAAO,CACP,IAAMwD,EAAO1H,EAAc,GAAK,EAAIA,EAAc,EAAI,EACtDwH,EAAetD,EAAMvE,MAAM+H,EAAMzH,EAAWyH,OAEjD,CAAC1H,EAAaC,EAAUiE,IAE3B,IAAMnF,EAASC,YAAW,CACtBC,KAAM,CACF0I,aAAc,SAFP3I,GAMf,OAAO,kBAAC4I,EAAA,EAAD,CAAWpI,UAAWT,EAAOE,KAAM4I,SAAS,KAAKtF,cAAY,+BAChE,kBAACuF,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAS1I,WAAW,UAAU2I,QAAS,GAC1DV,GAAeA,EAAYzC,KAAI,SAACoD,EAAO3B,GAAR,OAC5B,kBAACuB,EAAA,EAAD,CAAMlC,MAAI,EAACuC,IAAG,UAAK5B,EAAL,YAAY2B,EAAMpG,MAAQsG,GAAI,EAAGC,GAAI,IAC/C,kBAAC1G,EAAD,CAAaE,KAAMqG,U,+CC3BxB,SAASI,EAAO1G,GAAQ,IAC3B5B,EAAuC4B,EAAvC5B,YAAaC,EAA0B2B,EAA1B3B,SAAUsI,EAAgB3G,EAAhB2G,YAEzBxJ,EAASC,YAAW,CACtBC,KAAM,CACF0I,aAAc,QAElBa,YAAa,CACTC,UAAW,UALJzJ,GASTmD,EAAWC,cAZiB,EAasBkF,oBAAS,GAb/B,mBAa3BoB,EAb2B,KAaLC,EAbK,OAccrB,oBAAS,GAdvB,mBAc3BsB,EAd2B,KAcTC,EAdS,KAqBlC,OALApB,qBAAU,WACNkB,EAAwB3I,GAAe,GACvC6I,EAAoB7I,GAAeW,KAAKC,KAAK2H,EAActI,MAC5D,CAACsI,EAAavI,EAAaC,IAEvB,kBAAC2H,EAAA,EAAD,CAAWpI,UAAWT,EAAOE,KAAM4I,SAAS,MAC/C,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACe,UAAU,MAAMd,QAAQ,gBAAgBzF,cAAY,mBAChE,kBAACuF,EAAA,EAAD,CAAMlC,MAAI,EAACyC,GAAI,GACX,kBAACU,EAAA,EAAD,CAAQC,SAAUN,EAAsBO,QAAQ,YAAYC,MAAM,UAAU5G,QAAS,kBAAMH,EAASrB,OAChG,kBAAC,IAAD,QAGR,kBAACgH,EAAA,EAAD,CAAMtI,UAAWT,EAAOyJ,YAAa5C,MAAI,EAACyC,GAAI,GAC1C,kBAACU,EAAA,EAAD,CAAQC,SAAUJ,EAAkBK,QAAQ,YAAYC,MAAM,UAAU5G,QAAS,kBAAMH,EAAS3B,EAAS+H,MACrG,kBAAC,IAAD,U,4CCrCL,SAASY,GAAQvH,GAAQ,IAC5BqD,EAAYrD,EAAZqD,QACF9C,EAAWC,cACXrD,EAASC,YAAW,CACtBC,KAAM,CACFC,MAAO,OACP8C,QAAS,UAEboH,MAAO,CACH/J,eAAgB,WANTL,GAUf,OAAO,kBAAC4I,EAAA,EAAD,CAAWC,SAAS,KAAKtF,cAAY,oBACxC,kBAACuF,EAAA,EAAD,CAAMC,WAAS,EAACe,UAAU,MAAMd,QAAQ,SAAS1I,WAAW,UACxD,kBAACwI,EAAA,EAAD,CAAMlC,MAAI,EAACyC,GAAI,IACX,kBAACgB,GAAA,EAAD,CAAa7J,UAAWT,EAAOE,KAAMqK,UAAU,YAC3C,kBAACC,GAAA,EAAD,CAAY/J,UAAWT,EAAOqK,MAAOI,KAAG,EAACC,aAAW,WAAW5J,KAAK,WAAW6J,aAAa,OACxF,kBAACC,GAAA,EAAD,CACIzB,MAAOxI,EACPkK,QAAS,kBAACC,GAAA,EAAD,CAAOX,MAAM,UAAUY,QAAS7E,IAAYvF,IACrDqK,MAAM,UACNC,eAAe,MACf1H,QAAS,kBAAMH,EAAS/B,EAAaV,OAEzC,kBAACiK,GAAA,EAAD,CACIzB,MAAOxI,EACPkK,QAAS,kBAACC,GAAA,EAAD,CAAOX,MAAM,UAAUY,QAAS7E,IAAYvF,IACrDqK,MAAM,aACNC,eAAe,MACf1H,QAAS,kBAAMH,EAAS/B,EAAaV,Y,2CCvBlD,SAASuK,GAAMrI,GAAQ,IAC1B1B,EAAqD0B,EAArD1B,oBAAqBiE,EAAgCvC,EAAhCuC,YAAaa,EAAmBpD,EAAnBoD,eACpCjG,EAASC,YAAW,CACtBC,KAAM,CACF+C,QAAS,GACTkI,SAAU,WACV,OAAQ,CACJC,KAAM,QAEVxC,aAAc,IAElByC,IAAK,CACDC,OAAQ,GACRC,KAAM,GACNJ,SAAU,YAEdK,MAAO,CACHrL,MAAO,SAfAF,GAkBTmD,EAAWC,cApBgB,EAqBGkF,mBAAS,IArBZ,mBAqB1B5B,EArB0B,KAqBd8E,EArBc,KAuB3BC,EAAMC,mBAiGZ,OA/FAjD,qBAAU,WACFtD,GAAejE,GACfsK,EAAcrG,EAAYsB,WAAWC,WAAWC,QAAO,SAAAC,GACnD,IAAM+E,EAAa,IAAIzJ,KAAKhB,GACtB2F,EAAW,IAAI3E,KAAK0E,EAAKE,MAE/B,OAAO6E,EAAWlG,YAAcoB,EAASpB,WAAakG,EAAW1E,aAAeJ,EAASI,cAC1FnB,KAAI,SAAAc,GAAS,IACec,EAAgBd,EAAnC/D,KAAQ4E,QAAWC,QAE3B,MAAO,CACHlE,YAAakE,EAAQC,gBACrBlE,SAAUiE,EAAQE,0BAClBgE,UAAWlE,EAAQmE,WACnBC,cAAepE,EAAQqE,oBACvBC,SAAUtE,EAAQuE,kBAClBC,OAAQxE,EAAQyE,oBAChBC,KAAM,IAAIlK,KAAK0E,EAAKE,MAAMK,kBAKvC,CAAChC,EAAajE,IAEjBuH,qBAAU,WACN,GAAIgD,EAAIY,QAAS,CACbZ,EAAIY,QAAQC,UAAY,GAExB,IAAMC,EAAU,CAAEjB,IAAK,GAAID,MAAO,EAAGmB,OAAQ,GAAIC,KAAM,IAEjDC,EAAQjB,EAAIY,QAAQM,wBAAwBzM,MAO5C0M,EAJaC,KAAUpB,EAAIY,SAC5BS,OAAO,OACPC,KAAK,UAAW,CAAC,EAAG,EAAGL,EANb,MASVI,OAAO,KAGNE,EAAIH,OACLI,OAAOJ,KAASnG,EAAWoB,SAC3BoF,MAAM,CAACX,EAAOE,KAAMC,EAAQH,EAAOlB,QACnCrI,QAAQ,IAEPmK,EAAIN,OACLI,OAAO,CAAC,EAAGJ,KAAOnG,GAAY,SAAA0G,GAAC,OAAIA,EAAE5J,iBAAe6J,OACpDH,MAAM,CAnBI,IAmBMX,EAAOC,OAAQD,EAAOjB,MAE3CsB,EAAEE,OAAO,KACJC,KAAK,OAAQ,aACbO,UAAU,QACVzK,KAAK6D,GACL6G,KAAK,QACLR,KAAK,KAAK,SAACS,EAAGlI,GAAJ,OAAU0H,EAAE1H,MACtByH,KAAK,KAAK,SAAAK,GAAC,OAAID,EAAEC,EAAE5J,gBACnBuJ,KAAK,UAAU,SAAAK,GAAC,OAAID,EAAE,GAAKA,EAAEC,EAAE5J,gBAC/BuJ,KAAK,QAASC,EAAES,aAwBrBb,EAAEE,OAAO,KAAKY,MArBC,SAAAd,GAAC,OAAIA,EACfG,KAAK,YADU,sBAhCL,IAiCgCR,EAAOC,OADlC,MAEfkB,KAAKb,KAAcG,GAAGW,YAAW,SAAArI,GAAC,OAAIoB,EAAWpB,GAAG8G,QAAMwB,cAAc,OAoB7EhB,EAAEE,OAAO,KAAKY,MAlBC,SAAAd,GAAC,OAAIA,EACfG,KAAK,YADU,oBACgBR,EAAOE,KADvB,QAEfiB,KAAKb,KAAYM,IACjBO,MAAK,SAAAd,GAAC,OAAIA,EAAEiB,OAAO,WAAWC,YAC9BJ,MAAK,SAAAd,GAAC,OAAIA,EAAEE,OAAO,QACfC,KAAK,KAAMR,EAAOE,MAClBM,KAAK,IAAK,IACVA,KAAK,OAAQ,gBACbA,KAAK,cAAe,SACpBgB,KALM,uBAKe/H,EAAegI,OAAO,GAAGC,cAAgBjI,EAAerF,MAAM,QACvF+M,MAAK,SAAAd,GAAC,OAAIA,EAAEE,OAAO,QACfC,KAAK,IAAK,OACVA,KAAK,IAAK,IACVA,KAAK,OAAQ,gBACbA,KAAK,cAAe,SACpBgB,KALM,gBAKQ,IAAI7L,KAAKhB,GAAqByC,gCAK1D,CAAC+C,EAAY+E,EAAKvK,EAAqB8E,IAE1CyC,qBAAU,WACFzC,GACAwF,GAAc,SAAA0C,GAAC,OAAIA,EAAEpI,KAAI,SAAAc,GACrB,OAAO,2BAAKA,GAAZ,IAAkBpD,YAAa0C,EAA+BU,EAAKpD,YAAawC,aAGzF,CAACA,IAEG,oCAAG9E,GAAuB,kBAAC0H,EAAA,EAAD,CAAWC,SAAS,KAAKtF,cAAY,kBAClE,kBAACF,EAAA,EAAD,CAAO7C,UAAWT,EAAOE,MACrB,kBAACkO,GAAA,EAAD,CAAK3N,UAAWT,EAAOqL,IAAKlB,MAAM,UAAUO,aAAW,MAAM2D,KAAK,QAAQ9K,QAAS,kBAAMH,EAASnB,EAAuB,SACrH,kBAAC,KAAD,OAEJ,yBAAKyJ,IAAKA,EAAKjL,UAAWT,EAAOwL,WCrI9B,SAAS8C,GAAczL,GAAQ,IACnC0L,EAAiB1L,EAAjB0L,KAAMC,EAAW3L,EAAX2L,QAEb,OAAO,kBAACzF,EAAA,EAAD,CAAMC,WAAS,EAACxF,cAAY,0BAC/B,kBAACuF,EAAA,EAAD,CAAMlC,MAAI,EAACyC,GAAI,IACX,yDACA,2CAAiBiF,GACjB,2BAAIC,KCLD,kBACX,IAAMrJ,EAAQsJ,YAAYlI,GACpBN,EAAiBwI,YAAYlM,GAC7BrB,EAAWuN,YAAY/L,GACvBzB,EAAcwN,YAAYhM,GAC1BtB,EAAsBsN,YAAY9L,GAClCyC,EAAcqJ,YAAYpI,GAC1BmD,EAAcrE,EAAQA,EAAM4C,OAAS,EAE3C,OAAK3C,EAIE,oCACH,kBAACgF,GAAD,CAASlE,QAASD,IAClB,kBAACsD,EAAD,CAAQrI,SAAUA,EAAUD,YAAaA,EAAauI,YAAaA,IACnE,kBAAClB,EAAD,CAAoBnD,MAAOA,EAAOe,QAASD,EAAgBhF,YAAaA,EAAaC,SAAUA,IAC/F,kBAACgK,GAAD,CAAO/J,oBAAqBA,EAAqBiE,YAAaA,EAAaa,eAAgBA,KAPpF,kBAACqI,GAAD,CAAeC,KAAM,IAAKC,QAAQ,oCCIlCE,OAnBf,WACE,IAAMtL,EAAWC,cACX+B,EAAcqJ,YAAYpI,GAFnB,EAIekC,oBAAS,GAJxB,mBAINoG,EAJM,KAIEC,EAJF,KAcb,OARAlG,qBAAU,WACRtF,EPcA,uCAAO,WAAMA,GAAN,eAAAU,EAAA,+EAEuBD,IAFvB,OAEOyC,EAFP,OAGClD,EAAS6B,EAAWqB,IAHrB,gDAKCnC,QAAQ0K,MAAR,MALD,yDAAP,yDObC,CAACzL,IAEJsF,qBAAU,WACRkG,EAAUE,QAAQ1J,MACjB,CAACA,IAEG,oCACJuJ,EAAS,kBAACI,GAAD,MAAc,kBAACC,EAAD,QCTRF,QACW,cAA7BG,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdSC,mBAAe,CAC1BC,QAAS,CACLhJ,QAASiJ,EACT/M,SAAUgN,KCClBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,IACf,kBAAC,GAAD,QAGJC,SAASC,eAAe,SFqHpB,kBAAmBhL,WACrBA,UAAUiL,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACL1K,QAAQ0K,MAAMA,EAAML,c","file":"static/js/main.12d3daae.chunk.js","sourcesContent":["import React from 'react';\nimport { CircularProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nexport default function () {\n    const styles = makeStyles({\n        root: {\n            width: '100%',\n            height: '100vh',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            '& > div': {\n                alignSelf: 'center'\n            }\n        }\n    })();\n\n    return <div className={styles.root}>\n        <div>\n            <CircularProgress />\n        </div>\n    </div>;\n}","import { createSlice } from '@reduxjs/toolkit';\n\nexport const constants = {\n    CELCIUS: 'celcius',\n    FAHRENHEIT: 'fahrenheit'\n};\n\nexport const slice = createSlice({\n    name: 'settings',\n    initialState: {\n        degree: constants.CELCIUS,\n        currentPage: 1,\n        pageSize: 3,\n        activeDateForCharts: null\n    },\n    reducers: {\n        changeDegree(state, action) {\n            state.degree = action.payload\n        },\n        nextPage(state, action) {\n            const itemAmount = action.payload;\n            const pageAmount = Math.ceil(itemAmount / state.pageSize);\n            const nextPageNumber = state.currentPage + 1;\n\n            state.currentPage = nextPageNumber > pageAmount ? state.currentPage : nextPageNumber;\n        },\n        prevoiusPage(state) {\n            const previousPage = state.currentPage - 1;\n\n            state.currentPage = previousPage > 0 ? previousPage : state.currentPage;\n        },\n        setActiveDateForCharts(state, action) {\n            if (action.payload == null) {\n                state.activeDateForCharts = null;\n            } else {\n                const payloadDate = new Date(action.payload).getTime();\n                const stateDate = new Date(state.activeDateForCharts).getTime();\n\n                state.activeDateForCharts = payloadDate === stateDate ? null : payloadDate;\n            }\n        }\n    }\n});\n\nexport const { changeDegree, nextPage, prevoiusPage, setActiveDateForCharts } = slice.actions;\n\nexport const selectCurrentDegree = state => state.settings.degree;\nexport const selectCurrentPage = state => state.settings.currentPage;\nexport const selectPageSize = state => state.settings.pageSize;\nexport const selectActiveDateForCharts = state => state.settings.activeDateForCharts;\n\nexport default slice.reducer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Paper, makeStyles } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { setActiveDateForCharts } from '../../../../redux/features/settingsReducer';\n\nWeatherCard.propTypes = {\n    data: PropTypes.shape({\n        temperature: PropTypes.number,\n        pressure: PropTypes.number,\n        weatherType: PropTypes.string,\n        date: PropTypes.string\n    })\n};\n\nexport default function WeatherCard(props) {\n    const { data } = props;\n    const date = new Date(data.date);\n    const styles = makeStyles({\n        root: {\n            height: '100%',\n            boxSizing: 'border-box',\n            padding: 10,\n            cursor: 'pointer',\n            fontSize: '12px'\n        }\n    })();\n    const dispatch = useDispatch();\n\n    return <Paper className={styles.root} onClick={() => dispatch(setActiveDateForCharts(date.getTime()))} data-testid='WeatherCardComponent'>\n        <p><strong>Temperature:</strong> {data.temperature}°</p>\n        <p><strong>Pressure:</strong> {data.pressure}</p>\n        <p><strong>Weather:</strong> {data.weatherType}</p>\n        <p><strong>Date:</strong> {date.toLocaleDateString()}</p>\n    </Paper>;\n}","export async function getWeather() {\n    let coords = { latitude: '', longitude: '' };\n\n    try {\n        const { coords: { latitude, longitude } } = await getCurrentPostion();\n        coords = { latitude, longitude };\n    } catch (error) {\n        console.warn('Error with geolocation API.. Set default Munich weather..', error);\n        coords = { longitude: '48.1351', latitude: '11.5820' }\n    }\n\n    const response = await fetch(`https://api.met.no/weatherapi/locationforecast/2.0/compact?lat=${coords.latitude}&lon=${coords.longitude}`);\n\n    if (response.ok) {\n        return response.json();\n    } else {\n        throw Error(`Response status is ${response.status}`);\n    }\n}\n\nfunction getCurrentPostion() {\n    return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n    });\n}","import { createSlice } from '@reduxjs/toolkit';\nimport { getWeather } from '../../api/yrNoApi';\nimport { constants } from './settingsReducer';\n\nexport const slice = createSlice({\n    name: 'weather',\n    initialState: {},\n    reducers: {\n        setWeather(state, action) {\n            state.data = { ...state, ...action.payload }\n        },\n        setCards(state, action) {\n            state.cards = getCards(state.data, action.payload)\n        },\n        changeTemperatureType(state, action) {\n            state.cards = state.cards.map(card => {\n                card.temperature = temperatureConverter(card, action.payload);\n                card.degrees = action.payload;\n                return card;\n            });\n        }\n    }\n});\n\nexport const { setWeather, setCards, changeTemperatureType } = slice.actions;\n\nexport const fetchWeather = () => {\n    return async dispatch => {\n        try {\n            const weather = await getWeather();\n            dispatch(setWeather(weather));\n        } catch (error) {\n            console.error(error);\n        }\n    };\n}\n\nexport const selectWeatherData = state => state.weather.data;\nexport const selectCards = state => state.weather.cards;\n\nexport default slice.reducer;\n\nexport function fahrenheitToCelciusAndViceVers(temperature, currentDegrees) {\n    if (currentDegrees === constants.FAHRENHEIT) {\n        return Math.round((temperature * 9 / 5) + 32);\n    } else {\n        return Math.round((temperature - 32) * 5 / 9);\n    }\n}\n\n/**\n * Prepare cards from weather data.\n * \n * @param {*} weatherData \n * @param {*} startFrom \n */\nfunction getCards(weatherData, startFrom = 0) {\n    const cards = [];\n    const referenceDate = new Date();\n\n    for (let i = startFrom, today = new Date(referenceDate.setDate(referenceDate.getDate() + startFrom)); i < 5; i++) {\n        if (i > 0) {\n            today.setDate(today.getDate() + 1);\n        }\n\n        cards.push(summarize(today, weatherData))\n    }\n\n    return cards;\n}\n\n/**\n * Collapse timeseries and get average weather data for a day.\n * \n * @param {*} referenceDate \n * @param {*} weatherData \n */\nfunction summarize(referenceDate, weatherData) {\n    const summarizedDay = weatherData.properties.timeseries.filter(item => {\n        const itemDate = new Date(item.time);\n        const equalDates = itemDate.getFullYear() === referenceDate.getFullYear() &&\n            itemDate.getMonth() === referenceDate.getMonth() &&\n            itemDate.getDate() === referenceDate.getDate();\n        if (new Date().getDate() === itemDate.getDate()) {\n            // Filter by day for the current day.\n            return equalDates;\n        } else {\n            // Filter timeseries by day and day time. We need weather during the day.\n            const dayTime = itemDate.getHours() > 10 && itemDate.getHours() < 23\n            return equalDates && dayTime;\n        }\n    }).reduce((acc, curr, idx, src) => {\n        const { data: { instant: { details: { air_temperature, air_pressure_at_sea_level } } } } = curr;\n\n        if (idx === 0) {\n            const middle = src[Math.floor(src.length / 2)];\n            const { data } = middle;\n            acc.weatherType = summary(data)['next_6_hours'];\n            acc.date = curr.time;\n        }\n\n        acc.temperature = air_temperature + acc.temperature;\n        acc.pressure = air_pressure_at_sea_level + acc.pressure;\n        acc.counter = acc.counter + 1;\n        acc.date = acc.date ? acc.date : referenceDate;\n\n        return acc;\n    }, { temperature: 0, pressure: 0, counter: 0, date: null, weatherType: null });\n\n    return {\n        temperature: Math.round(summarizedDay.temperature / summarizedDay.counter),\n        pressure: convertPressure(Math.round(summarizedDay.pressure / summarizedDay.counter)),\n        weatherType: summarizedDay.weatherType,\n        date: summarizedDay.date,\n        degrees: constants.CELCIUS\n    };\n}\n\n/**\n * Convert celcisus to fahrenheit and vice versa.\n * \n * @param {*} card \n * @param {*} currentDegrees \n */\nfunction temperatureConverter(card, currentDegrees) {\n    if (card.degrees === currentDegrees || !currentDegrees) {\n        return card.temperature;\n    }\n\n    return fahrenheitToCelciusAndViceVers(card.temperature, currentDegrees);\n}\n\n/**\n * Convert hPa pressure to mmHg.\n * \n * @param {*} pressure \n */\nfunction convertPressure(pressure) {\n    return Math.round(pressure * 0.75);\n}\n\n/**\n * Sometimes you can get one of 'next hours', some times all of them.\n * This proxy tries to go through all parameters to find next_6 in the first and\n * then 12 and then 1.\n * \n * If nothing was found just returns 'Hmm..' \n * @param {*} data \n */\nfunction summary(data) {\n    const NEXT_1_HOURS = 'next_1_hours';\n    const NEXT_6_HOURS = 'next_6_hours';\n    const NEXT_12_HOURS = 'next_12_hours';\n\n    return new Proxy(data, {      \n        get: (target, prop) => {\n            if (prop === NEXT_6_HOURS && target[prop]) {\n                return target[prop].summary['symbol_code'];\n            } else if (prop === NEXT_6_HOURS && !target[prop]) {\n                if (target[NEXT_12_HOURS]) {\n                    return target[NEXT_12_HOURS].summary['symbol_code'];\n                } else if (target[NEXT_1_HOURS]) {\n                    return target[NEXT_1_HOURS].summary['symbol_code'];\n                } else {\n                    return 'Hmm..';\n                }\n            }\n        }\n    });\n}","import React, { useEffect, useState } from 'react';\nimport { Grid, Container, makeStyles } from '@material-ui/core';\nimport WeatherCard from './WeatherCard';\nimport { useDispatch } from 'react-redux';\nimport { setCards, changeTemperatureType } from '../../../../redux/features/weatherReducer';\nimport PropTypes from 'prop-types';\n\nListOfWeatherCards.propTypes = {\n    cards: PropTypes.array,\n    degrees: PropTypes.string,\n    pageSize: PropTypes.number,\n    currentPage: PropTypes.number\n};\n\nexport default function ListOfWeatherCards(props) {\n    const { cards, degrees, currentPage, pageSize } = props;\n    const dispatch = useDispatch();\n    const [slicedCards, setSlicedCards] = useState([]);\n\n    useEffect(() => {\n        dispatch(setCards());\n    }, [dispatch]);\n\n    useEffect(() => {\n        dispatch(changeTemperatureType(degrees));\n    }, [degrees, dispatch])\n\n    useEffect(() => {\n        if (cards) {\n            const page = currentPage - 1 >= 0 ? currentPage - 1 : 0;\n            setSlicedCards(cards.slice(page, pageSize + page));\n        }\n    }, [currentPage, pageSize, cards])\n\n    const styles = makeStyles({\n        root: {\n            marginBottom: '30px'\n        }\n    })();\n\n    return <Container className={styles.root} maxWidth='md' data-testid='ListOfWeatherCardsComponent'>\n        <Grid container justify='center' alignItems='stretch' spacing={2}>\n            {slicedCards && slicedCards.map((value, idx) => (\n                <Grid item key={`${idx}-${value.date}`} sm={4} xs={12}>\n                    <WeatherCard data={value} />\n                </Grid>\n            ))}\n        </Grid>\n    </Container>;\n}","import React, { useState, useEffect } from 'react';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport { Container } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { prevoiusPage, nextPage } from '../../../../redux/features/settingsReducer';\nimport PropTypes from 'prop-types';\n\nArrows.propTypes = {\n    currentPage: PropTypes.number,\n    pageSize: PropTypes.number,\n    cardsAmount: PropTypes.number\n};\n\nexport default function Arrows(props) {\n    const { currentPage, pageSize, cardsAmount } = props;\n\n    const styles = makeStyles({\n        root: {\n            marginBottom: '30px'\n        },\n        rightButton: {\n            textAlign: 'right'\n        }\n    })();\n\n    const dispatch = useDispatch();\n    const [previousPageDisabled, setPreviousPageDisabled] = useState(true);\n    const [nextPageDisabled, setNextPageDisabled] = useState(true);\n\n    useEffect(() => {\n        setPreviousPageDisabled(currentPage <= 1);\n        setNextPageDisabled(currentPage >= Math.ceil(cardsAmount / pageSize))\n    }, [cardsAmount, currentPage, pageSize]);\n\n    return <Container className={styles.root} maxWidth='md'>\n        <Grid container direction=\"row\" justify=\"space-between\" data-testid=\"ArrowsComponent\">\n            <Grid item xs={2}>\n                <Button disabled={previousPageDisabled} variant=\"contained\" color=\"primary\" onClick={() => dispatch(prevoiusPage())}>\n                    <NavigateBeforeIcon />\n                </Button>\n            </Grid>\n            <Grid className={styles.rightButton} item xs={2}>\n                <Button disabled={nextPageDisabled} variant=\"contained\" color=\"primary\" onClick={() => dispatch(nextPage(cardsAmount))}>\n                    <NavigateNextIcon />\n                </Button>\n            </Grid>\n        </Grid>\n    </Container>\n}","import React from 'react';\nimport { FormControl, RadioGroup, FormControlLabel, Radio, Grid, makeStyles, Container } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { constants, changeDegree } from '../../../../redux/features/settingsReducer';\nimport PropTypes from 'prop-types';\n\nDegrees.propTypes = {\n    degrees: PropTypes.string\n};\n\nexport default function Degrees(props) {\n    const { degrees } = props;\n    const dispatch = useDispatch();\n    const styles = makeStyles({\n        root: {\n            width: '100%',\n            padding: '30px 0'\n        },\n        group: {\n            justifyContent: 'center'\n        }\n    })();\n\n    return <Container maxWidth='md' data-testid='DegreesComponent'>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n            <Grid item xs={12}>\n                <FormControl className={styles.root} component=\"fieldset\">\n                    <RadioGroup className={styles.group} row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                        <FormControlLabel\n                            value={constants.CELCIUS}\n                            control={<Radio color=\"primary\" checked={degrees === constants.CELCIUS} />}\n                            label=\"Celcius\"\n                            labelPlacement=\"end\"\n                            onClick={() => dispatch(changeDegree(constants.CELCIUS))}\n                        />\n                        <FormControlLabel\n                            value={constants.FAHRENHEIT}\n                            control={<Radio color=\"primary\" checked={degrees === constants.FAHRENHEIT} />}\n                            label=\"Fahrenheit\"\n                            labelPlacement=\"end\"\n                            onClick={() => dispatch(changeDegree(constants.FAHRENHEIT))}\n                        />\n                    </RadioGroup>\n                </FormControl>\n            </Grid>\n        </Grid>\n    </Container>\n}","import React, { useState, useEffect, useRef } from 'react';\nimport { Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Container, Fab } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { setActiveDateForCharts } from '../../../redux/features/settingsReducer';\nimport * as d3 from 'd3';\nimport { fahrenheitToCelciusAndViceVers } from '../../../redux/features/weatherReducer';\n\nChart.propTypes = {\n    activeDateForChart: PropTypes.number,\n    weatherData: PropTypes.object,\n    currentDegrees: PropTypes.string\n};\n\nexport default function Chart(props) {\n    const { activeDateForCharts, weatherData, currentDegrees } = props;\n    const styles = makeStyles({\n        root: {\n            padding: 30,\n            position: 'relative',\n            '.bar': {\n                fill: 'blue'\n            },\n            marginBottom: 30\n        },\n        fab: {\n            right: -15,\n            top: -15,\n            position: 'absolute'\n        },\n        chart: {\n            width: '100%'\n        }\n    })();\n    const dispatch = useDispatch();\n    const [timeseries, setTimeseries] = useState([]);\n\n    const ref = useRef();\n\n    useEffect(() => {\n        if (weatherData && activeDateForCharts) {\n            setTimeseries(weatherData.properties.timeseries.filter(item => {\n                const activeDate = new Date(activeDateForCharts);\n                const itemDate = new Date(item.time);\n\n                return activeDate.getDate() === itemDate.getDate() && activeDate.getMonth() === itemDate.getMonth();\n            }).map(item => {\n                const { data: { instant: { details } } } = item;\n\n                return {\n                    temperature: details.air_temperature,\n                    pressure: details.air_pressure_at_sea_level,\n                    windSpeed: details.wind_speed,\n                    windDirection: details.wind_from_direction,\n                    humanity: details.relative_humidity,\n                    clouds: details.cloud_area_fraction,\n                    hour: new Date(item.time).getHours()\n                };\n            }));\n        }\n\n    }, [weatherData, activeDateForCharts]);\n\n    useEffect(() => {\n        if (ref.current) {\n            ref.current.innerHTML = '';\n\n            const MARGIN = ({ top: 30, right: 0, bottom: 30, left: 40 })\n            const HEIGHT = 300;\n            const WIDTH = ref.current.getBoundingClientRect().width;\n\n            // SVG\n            const svgElement = d3.select(ref.current)\n                .append('svg')\n                .attr('viewBox', [0, 0, WIDTH, HEIGHT]);\n\n            const g = svgElement\n                .append('g');\n\n            // Bars\n            const x = d3.scaleBand()\n                .domain(d3.range(timeseries.length))\n                .range([MARGIN.left, WIDTH - MARGIN.right])\n                .padding(0.1);\n\n            const y = d3.scaleLinear()\n                .domain([0, d3.max(timeseries, d => d.temperature)]).nice()\n                .range([HEIGHT - MARGIN.bottom, MARGIN.top]);\n\n            g.append(\"g\")\n                .attr(\"fill\", 'steelblue')\n                .selectAll(\"rect\")\n                .data(timeseries)\n                .join(\"rect\")\n                .attr(\"x\", (_, i) => x(i))\n                .attr(\"y\", d => y(d.temperature))\n                .attr(\"height\", d => y(0) - y(d.temperature))\n                .attr(\"width\", x.bandwidth());\n\n            // Axis\n            const xScale = g => g\n                .attr(\"transform\", `translate(0,${HEIGHT - MARGIN.bottom})`)\n                .call(d3.axisBottom(x).tickFormat(i => timeseries[i].hour).tickSizeOuter(0));\n\n            const yScale = g => g\n                .attr(\"transform\", `translate(${MARGIN.left},0)`)\n                .call(d3.axisLeft(y))\n                .call(g => g.select(\".domain\").remove())\n                .call(g => g.append(\"text\")\n                    .attr(\"x\", -MARGIN.left)\n                    .attr(\"y\", 10)\n                    .attr(\"fill\", \"currentColor\")\n                    .attr(\"text-anchor\", \"start\")\n                    .text(`Temperature: ${currentDegrees.charAt(0).toUpperCase() + currentDegrees.slice(1)}`))\n                .call(g => g.append('text')\n                    .attr('x', '43%')\n                    .attr('y', 10)\n                    .attr('fill', 'currentColor')\n                    .attr('text-anchor', 'start')\n                    .text(`Date: ${new Date(activeDateForCharts).toLocaleDateString()}`));\n\n            g.append('g').call(xScale);\n            g.append('g').call(yScale);\n        }\n    }, [timeseries, ref, activeDateForCharts, currentDegrees]);\n\n    useEffect(() => {\n        if (currentDegrees) {\n            setTimeseries(t => t.map(item => {\n                return { ...item, temperature: fahrenheitToCelciusAndViceVers(item.temperature, currentDegrees) };\n            }))\n        }\n    }, [currentDegrees]);\n\n    return <>{activeDateForCharts && <Container maxWidth=\"md\" data-testid='ChartComponent'>\n        <Paper className={styles.root}>\n            <Fab className={styles.fab} color=\"primary\" aria-label=\"add\" size='small' onClick={() => dispatch(setActiveDateForCharts(null))}>\n                <CloseIcon />\n            </Fab>\n            <div ref={ref} className={styles.chart}></div>\n        </Paper>\n    </Container>}</>\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from '@material-ui/core';\n\nNotFoundError.propTypes = {\n    code: PropTypes.number,\n    message: PropTypes.string\n};\n\nexport default function NotFoundError(props) {\n    const {code, message} = props;\n\n    return <Grid container data-testid='NotFoundErrorComponent'>\n        <Grid item xs={12}>\n            <h1>Something goes wrong.. :(</h1>\n            <h3>Error code: {code}</h3>\n            <p>{message}</p>\n        </Grid>\n    </Grid>\n}","import React from 'react';\nimport ListOfWeatherCards from './WeatherCards/ListOfWeatherCards';\nimport Arrows from './Controls/Arrows';\nimport Degrees from './Controls/Degrees';\nimport Chart from './Chart';\nimport { useSelector } from 'react-redux';\nimport { selectCurrentDegree, selectPageSize, selectCurrentPage, selectActiveDateForCharts } from '../../../redux/features/settingsReducer';\nimport { selectCards, selectWeatherData } from '../../../redux/features/weatherReducer';\nimport NotFoundError from '../../Errors/NotFound';\n\n\nexport default function () {\n    const cards = useSelector(selectCards);\n    const currentDegrees = useSelector(selectCurrentDegree);\n    const pageSize = useSelector(selectPageSize);\n    const currentPage = useSelector(selectCurrentPage);\n    const activeDateForCharts = useSelector(selectActiveDateForCharts);\n    const weatherData = useSelector(selectWeatherData);\n    const cardsAmount = cards ? cards.length : 0;\n\n    if (!weatherData) {\n        return <NotFoundError code={404} message=\"Can't fetch data from server..\" />\n    }\n\n    return <>\n        <Degrees degrees={currentDegrees} />\n        <Arrows pageSize={pageSize} currentPage={currentPage} cardsAmount={cardsAmount} />\n        <ListOfWeatherCards cards={cards} degrees={currentDegrees} currentPage={currentPage} pageSize={pageSize} />\n        <Chart activeDateForCharts={activeDateForCharts} weatherData={weatherData} currentDegrees={currentDegrees} />\n    </>\n}","import React, { useEffect, useState } from 'react';\nimport Loading from './components/Screens/Loading';\nimport Weather from './components/Screens/Weather/Weather';\nimport { fetchWeather, selectWeatherData } from './redux/features/weatherReducer';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const weatherData = useSelector(selectWeatherData);\n\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchWeather());\n  }, [dispatch]);\n\n  useEffect(() => {\n    setLoaded(Boolean(weatherData));\n  }, [weatherData])\n\n  return <>\n    {loaded ? <Weather /> : <Loading />} \n  </>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport weatherReducer from './features/weatherReducer';\nimport settingsReducer from './features/settingsReducer';\n\nexport default configureStore({\n    reducer: {\n        weather: weatherReducer,\n        settings: settingsReducer\n    }\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}